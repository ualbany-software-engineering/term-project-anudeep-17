'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertCommit = undefined;

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets a commit log string and return an object describing
 * the commit
 * @param commitStr
 * @return Object
 */
var convertCommit = exports.convertCommit = function convertCommit(commitStr) {
  var lines = commitStr.split(/\r?\n/);
  var commit = {};
  var re = void 0;

  lines.forEach(function (line) {
    if (!commit.hash) {
      re = line.match(/commit\s([a-zA-Z0-9]*)/);

      if (re) {
        var _re = re;

        var _re2 = (0, _slicedToArray3.default)(_re, 2);

        commit.hash = _re2[1];
      }
    } else if (!commit.name) {
      re = line.match(/Author:[\s]*([^<]*)<(.*)>/);

      if (re) {
        var _re3 = re;

        var _re4 = (0, _slicedToArray3.default)(_re3, 3);

        commit.name = _re4[1];
        commit.email = _re4[2];
      }
    } else if (!commit.date) {
      re = line.match(/Date:[\s]*(.*)/);

      if (re) {
        var _re5 = re;

        var _re6 = (0, _slicedToArray3.default)(_re5, 2);

        commit.date = _re6[1];
      }
    } else if (!commit.subject) {
      re = line.match(/\s*(.*)/);

      if (re && re[1]) {
        var _re7 = re;

        var _re8 = (0, _slicedToArray3.default)(_re7, 2);

        commit.subject = _re8[1];
      }
    }
  });

  return {
    hash: commit.hash.trim(),
    name: commit.name.trim(),
    email: commit.email.trim(),
    date: commit.date.trim(),
    subject: commit.subject.trim()
  };
};

/**
 * Gets a commits log string and return an array of objects
 * describing the commits
 * @param str
 * @return Array
 */

exports.default = function (str) {
  var lines = str.split(/\r?\n/);

  var commits = [];
  var index = -1;

  lines.forEach(function (line) {
    if (line.indexOf('commit ') === 0) {
      index += 1;
      commits[index] = '';
    }

    if (index > -1) {
      commits[index] = commits[index].concat(line + '\n');
    }
  });

  return commits.map(convertCommit);
};