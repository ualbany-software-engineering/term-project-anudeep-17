#!/usr/bin/env node
'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _safe = require('colors/safe');

var _safe2 = _interopRequireDefault(_safe);

var _prompt = require('prompt');

var _prompt2 = _interopRequireDefault(_prompt);

var _cliTable = require('cli-table');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _git = require('./git');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2));

var welcome = function welcome() {
  console.log('\n          / /\\            /\\ \\    \n         / /  \\          /  \\ \\   \n        / / /\\ \\        / /\\ \\ \\  \n       / / /\\ \\ \\      / / /\\ \\_\\ \n      / / /\\ \\_\\ \\    / / /_/ / / \n     / / /\\ \\ \\___\\  / / /__\\/ /  \n    / / /  \\ \\ \\__/ / / /_____/   \n   / / /____\\_\\ \\  / / /\\ \\ \\     \n  / / /__________\\/ / /  \\ \\ \\    \n  \\/_____________/\\/_/    \\_\\/    \n\nIf you don\'t see formatted output, try to increase width of the terminal to have more space.\n');
};

var ask = function ask(question) {
  return new _promise2.default(function (resolve, reject) {
    console.log('');
    _prompt2.default.get([].concat(question), function (err, output) {
      if (err) {
        return reject(err);
      }
      console.log('');
      return resolve(output);
    });
  });
};

var logCommits = function logCommits(commits) {
  var table = new _cliTable2.default({
    head: ['No.', 'Author', 'Subject', 'Date'],
    chars: {
      top: '',
      'top-mid': '',
      'top-left': '',
      'top-right': '',
      bottom: '',
      'bottom-mid': '',
      'bottom-left': '',
      'bottom-right': '',
      left: '',
      'left-mid': '',
      mid: '',
      'mid-mid': '',
      right: '',
      'right-mid': '',
      middle: ' '
    }
  });

  table.push.apply(table, (0, _toConsumableArray3.default)(commits.map(function (commit, index) {
    return [index + 1, '' + commit.name, commit.subject.slice(0, 50), commit.date];
  })));

  console.log(table.toString());
};

var logError = function logError(err) {
  if (argv.dev) {
    var table = new _cliTable2.default();
    table.push([err.stack]);
    console.log(table.toString());
  } else {
    console.log(_safe2.default.red(err.message));
  }
};

var anotherOne = function anotherOne() {
  return ask({
    name: 'another',
    description: 'Choose another commit from the same list (yes/no)?',
    default: 'no'
  }).then(function (_ref) {
    var another = _ref.another;
    return another.toLowerCase() === 'y' || another.toLowerCase() === 'yes';
  });
};

var start = function start(filter) {
  var commits = void 0;
  var commit = void 0;

  var dirPath = argv.path || process.cwd();

  return (0, _git.getCommits)(dirPath, filter).then(function (_commits) {
    commits = _commits;
    return logCommits(commits);
  }).then(function () {
    return ask([{
      name: 'number',
      description: 'Enter commit number to edit (1, 2, ..etc)',
      pattern: /[0-9]+/,
      required: true
    }, {
      name: 'date',
      description: 'Enter the new date',
      required: true
    }]);
  }).then(function (_ref2) {
    var number = _ref2.number,
        date = _ref2.date;

    if (number > commits.length) {
      throw new Error('Number must be between 1 and ' + commits.length);
    }
    commit = commits[number - 1];
    return (0, _git.changeDate)(dirPath, commit.hash, date, date);
  }).then(function () {
    console.log(_safe2.default.green('Date changed successfully for commit [' + commit.subject + ']'));
  }).then(anotherOne).then(function (yes) {
    return yes && start(filter);
  }).catch(function (err) {
    logError(err);

    return anotherOne().then(function (yes) {
      return yes && start(filter);
    });
  });
};

welcome();

start({
  count: argv.count || 5,
  hash: argv.hash
}).catch(function (err) {
  logError(err);
  return process.exit(0);
});